"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var environments_1 = require("./environments");
var Hapi = require("hapi");
var index_1 = require("./modules/index");
var HOST = process.env.HOST;
var BASES = process.env.BASES;
// const BROADCAST = process.env.BROADCAST
var REGISTRY = process.env.REGISTRY;
var StartServer = (function () {
    function StartServer() {
        this.server = new Hapi.Server({ debug: { request: ['error'] } });
        var port = environments_1.getServerConfigs().port;
        this.server.connection({
            port: port,
            routes: {
                cors: true
            }
        });
    }
    StartServer.prototype.connectServer = function (env) {
        var _this = this;
        return this.server.register(index_1.Modlues, {
            routes: {
                prefix: '/v1'
            }
        }, function (err) {
            if (err) {
                throw err;
            }
            _this.server.initialize(function (err) {
                if (err) {
                    throw err;
                }
                // Don't continue to start server if module
                // is being require()'d (likely in a test)
                if (!env) {
                    // Starting the server
                    _this.server.seneca
                        .use('consul-registry', {
                        host: "" + REGISTRY,
                        port: "8500"
                    })
                        .use('mesh', {
                        auto: true,
                        host: HOST,
                        bases: [BASES + ":39999"],
                        pin: 'role:ping,cmd:date',
                        discover: {
                            // multicast: {
                            //   address: BROADCAST
                            // },
                            // registry: {
                            //   host: '127.0.0.1',
                            //   port: "39999"
                            // }
                            registry: {
                                active: true
                            }
                        },
                    })
                        .ready(function () {
                        _this.server.start(function () {
                            var serverUri = _this.server.info.uri;
                            console.log("Server running at:, " + serverUri);
                        });
                    });
                }
            });
        });
    };
    return StartServer;
}());
exports.StartServer = StartServer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvbWFzdGVyL0RvY3VtZW50cy9IYXBpL2hhcGktc2VuZWNhLXRzL2FwaS1nYXRld2F5L3NlcnZlci50cyIsInNvdXJjZXMiOlsiL2hvbWUvbWFzdGVyL0RvY3VtZW50cy9IYXBpL2hhcGktc2VuZWNhLXRzL2FwaS1nYXRld2F5L3NlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLCtDQUFrRDtBQUVsRCwyQkFBNkI7QUFFN0IseUNBQTBDO0FBQzFDLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO0FBQzlCLElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO0FBQ2hDLDBDQUEwQztBQUMxQyxJQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQTtBQUVyQztJQUdJO1FBRk8sV0FBTSxHQUFlLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEtBQUssRUFBRSxFQUFFLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBZSxDQUFDO1FBR3pGLElBQU0sSUFBSSxHQUFHLCtCQUFnQixFQUFFLENBQUMsSUFBSSxDQUFDO1FBRXJDLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDO1lBQ25CLElBQUksRUFBRSxJQUFJO1lBQ1YsTUFBTSxFQUFFO2dCQUNKLElBQUksRUFBRSxJQUFJO2FBQ2I7U0FDSixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRU0sbUNBQWEsR0FBcEIsVUFBcUIsR0FBWTtRQUFqQyxpQkFpRUM7UUEvREcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLGVBQU8sRUFBRTtZQUNqQyxNQUFNLEVBQUU7Z0JBQ0osTUFBTSxFQUFFLEtBQUs7YUFDaEI7U0FDSixFQUNHLFVBQUMsR0FBRztZQUNBLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQ04sTUFBTSxHQUFHLENBQUE7WUFDYixDQUFDO1lBRUQsS0FBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsVUFBQyxHQUFHO2dCQUN2QixFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO29CQUNOLE1BQU0sR0FBRyxDQUFDO2dCQUNkLENBQUM7Z0JBRUQsMkNBQTJDO2dCQUMzQywwQ0FBMEM7Z0JBQzFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDUCxzQkFBc0I7b0JBQ3RCLEtBQUksQ0FBQyxNQUFNLENBQUMsTUFBTTt5QkFDYixHQUFHLENBQUMsaUJBQWlCLEVBQUU7d0JBQ3BCLElBQUksRUFBRSxLQUFHLFFBQVU7d0JBQ25CLElBQUksRUFBRSxNQUFNO3FCQUNmLENBQUM7eUJBQ0QsR0FBRyxDQUFDLE1BQU0sRUFBRTt3QkFDVCxJQUFJLEVBQUUsSUFBSTt3QkFDVixJQUFJLEVBQUUsSUFBSTt3QkFDVixLQUFLLEVBQUUsQ0FBSSxLQUFLLFdBQVEsQ0FBQzt3QkFDekIsR0FBRyxFQUFFLG9CQUFvQjt3QkFDekIsUUFBUSxFQUFFOzRCQUNOLGVBQWU7NEJBQ2YsdUJBQXVCOzRCQUN2QixLQUFLOzRCQUNMLGNBQWM7NEJBQ2QsdUJBQXVCOzRCQUN2QixrQkFBa0I7NEJBQ2xCLElBQUk7NEJBQ0osUUFBUSxFQUFFO2dDQUNOLE1BQU0sRUFBRSxJQUFJOzZCQUNmO3lCQUNKO3FCQVFKLENBQUM7eUJBQ0QsS0FBSyxDQUFDO3dCQUVILEtBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDOzRCQUNkLElBQUksU0FBUyxHQUFHLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQzs0QkFFckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBdUIsU0FBVyxDQUFDLENBQUM7d0JBQ3BELENBQUMsQ0FBQyxDQUFDO29CQUVQLENBQUMsQ0FBQyxDQUFBO2dCQUNWLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztRQUVQLENBQUMsQ0FBQyxDQUFDO0lBRVgsQ0FBQztJQUVMLGtCQUFDO0FBQUQsQ0FBQyxBQWpGRCxJQWlGQztBQWpGWSxrQ0FBVyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgZ2V0U2VydmVyQ29uZmlncyB9IGZyb20gJy4vZW52aXJvbm1lbnRzJztcbmltcG9ydCAqIGFzIFNlbmVjYSBmcm9tIFwic2VuZWNhXCI7XG5pbXBvcnQgKiBhcyBIYXBpIGZyb20gJ2hhcGknO1xuaW1wb3J0IHsgSGFwaVNlcnZlciB9IGZyb20gJy4vc2V2ZXItdHlwZXMnO1xuaW1wb3J0IHsgTW9kbHVlcyB9IGZyb20gJy4vbW9kdWxlcy9pbmRleCc7XG5jb25zdCBIT1NUID0gcHJvY2Vzcy5lbnYuSE9TVDtcbmNvbnN0IEJBU0VTID0gcHJvY2Vzcy5lbnYuQkFTRVM7XG4vLyBjb25zdCBCUk9BRENBU1QgPSBwcm9jZXNzLmVudi5CUk9BRENBU1RcbmNvbnN0IFJFR0lTVFJZID0gcHJvY2Vzcy5lbnYuUkVHSVNUUllcblxuZXhwb3J0IGNsYXNzIFN0YXJ0U2VydmVyIHtcbiAgICBwdWJsaWMgc2VydmVyOiBIYXBpU2VydmVyID0gbmV3IEhhcGkuU2VydmVyKHsgZGVidWc6IHsgcmVxdWVzdDogWydlcnJvciddIH0gfSkgYXMgSGFwaVNlcnZlcjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBjb25zdCBwb3J0ID0gZ2V0U2VydmVyQ29uZmlncygpLnBvcnQ7XG5cbiAgICAgICAgdGhpcy5zZXJ2ZXIuY29ubmVjdGlvbih7XG4gICAgICAgICAgICBwb3J0OiBwb3J0LFxuICAgICAgICAgICAgcm91dGVzOiB7XG4gICAgICAgICAgICAgICAgY29yczogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY29ubmVjdFNlcnZlcihlbnY6IGJvb2xlYW4pOiB2b2lkIHtcblxuICAgICAgICByZXR1cm4gdGhpcy5zZXJ2ZXIucmVnaXN0ZXIoTW9kbHVlcywge1xuICAgICAgICAgICAgcm91dGVzOiB7XG4gICAgICAgICAgICAgICAgcHJlZml4OiAnL3YxJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAgICAgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5zZXJ2ZXIuaW5pdGlhbGl6ZSgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIERvbid0IGNvbnRpbnVlIHRvIHN0YXJ0IHNlcnZlciBpZiBtb2R1bGVcbiAgICAgICAgICAgICAgICAgICAgLy8gaXMgYmVpbmcgcmVxdWlyZSgpJ2QgKGxpa2VseSBpbiBhIHRlc3QpXG4gICAgICAgICAgICAgICAgICAgIGlmICghZW52KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTdGFydGluZyB0aGUgc2VydmVyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcnZlci5zZW5lY2FcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudXNlKCdjb25zdWwtcmVnaXN0cnknLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvc3Q6IGAke1JFR0lTVFJZfWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcnQ6IFwiODUwMFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudXNlKCdtZXNoJywge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRvOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3N0OiBIT1NULFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYXNlczogW2Ake0JBU0VTfTozOTk5OWBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaW46ICdyb2xlOnBpbmcsY21kOmRhdGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNjb3Zlcjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbXVsdGljYXN0OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGFkZHJlc3M6IEJST0FEQ0FTVFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHJlZ2lzdHJ5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgIGhvc3Q6ICcxMjcuMC4wLjEnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICBwb3J0OiBcIjM5OTk5XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2lzdHJ5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZlOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGR1bXBuZXQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBsaXN0ZW46IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBwaW46ICdyb2xlOnBpbmcsY21kOmRhdGUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIGhvc3Q6IEhPU1RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlYWR5KCgpID0+IHtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcnZlci5zdGFydCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgc2VydmVyVXJpID0gdGhpcy5zZXJ2ZXIuaW5mby51cmk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBTZXJ2ZXIgcnVubmluZyBhdDosICR7c2VydmVyVXJpfWApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgfSk7XG5cbiAgICB9XG5cbn0iXX0=