"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var environments_1 = require("./environments");
var Hapi = require("hapi");
var index_1 = require("./modules/index");
var HOST = process.env.HOST;
var BASES = process.env.BASES;
// const BROADCAST = process.env.BROADCAST
var REGISTRY = process.env.REGISTRY;
var StartServer = (function () {
    function StartServer() {
        this.server = new Hapi.Server();
        var port = environments_1.getServerConfigs().port;
        this.server.connection({
            port: port,
            routes: {
                cors: true
            }
        });
    }
    StartServer.prototype.connectServer = function (env) {
        var _this = this;
        return this.server.register(index_1.Modlues, {
            routes: {
                prefix: '/v1'
            }
        }, function (err) {
            if (err) {
                throw err;
            }
            _this.server.initialize(function (err) {
                if (err) {
                    throw err;
                }
                // Don't continue to start server if module
                // is being require()'d (likely in a test)
                if (!env) {
                    // Starting the server
                    _this.server.seneca
                        .use('mqlight-transport', {})
                        .use('mesh', {
                        // auto: true,
                        host: HOST,
                        bases: [BASES + ":39999"],
                    })
                        .client({ type: 'mqlight' })
                        .ready(function () {
                        _this.server.start(function () {
                            var serverUri = _this.server.info.uri;
                            console.log("Server running at:, " + serverUri);
                        });
                    });
                }
            });
        });
    };
    return StartServer;
}());
exports.StartServer = StartServer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiL2hvbWUvbWFzdGVyL0RvY3VtZW50cy9IYXBpL2hhcGktc2VuZWNhLXRzL2FwaS1nYXRld2F5L3NlcnZlci50cyIsInNvdXJjZXMiOlsiL2hvbWUvbWFzdGVyL0RvY3VtZW50cy9IYXBpL2hhcGktc2VuZWNhLXRzL2FwaS1nYXRld2F5L3NlcnZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUNBLCtDQUFrRDtBQUVsRCwyQkFBNkI7QUFFN0IseUNBQTBDO0FBQzFDLElBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO0FBQzlCLElBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDO0FBQ2hDLDBDQUEwQztBQUMxQyxJQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQTtBQUVyQztJQUdJO1FBRk8sV0FBTSxHQUFlLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBZ0IsQ0FBQztRQUd4RCxJQUFNLElBQUksR0FBRywrQkFBZ0IsRUFBRSxDQUFDLElBQUksQ0FBQztRQUVyQyxJQUFJLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQztZQUNuQixJQUFJLEVBQUUsSUFBSTtZQUNWLE1BQU0sRUFBRTtnQkFDSixJQUFJLEVBQUUsSUFBSTthQUNiO1NBQ0osQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLG1DQUFhLEdBQXBCLFVBQXFCLEdBQVk7UUFBakMsaUJBaURDO1FBL0NHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxlQUFPLEVBQUU7WUFDakMsTUFBTSxFQUFFO2dCQUNKLE1BQU0sRUFBRSxLQUFLO2FBQ2hCO1NBQ0osRUFDRyxVQUFDLEdBQUc7WUFDQSxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2dCQUNOLE1BQU0sR0FBRyxDQUFBO1lBQ2IsQ0FBQztZQUVELEtBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLFVBQUMsR0FBRztnQkFDdkIsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztvQkFDTixNQUFNLEdBQUcsQ0FBQztnQkFDZCxDQUFDO2dCQUVELDJDQUEyQztnQkFDM0MsMENBQTBDO2dCQUMxQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7b0JBQ1Asc0JBQXNCO29CQUN0QixLQUFJLENBQUMsTUFBTSxDQUFDLE1BQU07eUJBQ2IsR0FBRyxDQUFDLG1CQUFtQixFQUFFLEVBQUUsQ0FBQzt5QkFDNUIsR0FBRyxDQUFDLE1BQU0sRUFBRTt3QkFDVCxjQUFjO3dCQUNkLElBQUksRUFBRSxJQUFJO3dCQUNWLEtBQUssRUFBRSxDQUFJLEtBQUssV0FBUSxDQUFDO3FCQU81QixDQUFDO3lCQUNELE1BQU0sQ0FBQyxFQUFDLElBQUksRUFBRSxTQUFTLEVBQUMsQ0FBQzt5QkFDekIsS0FBSyxDQUFDO3dCQUVILEtBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDOzRCQUNkLElBQUksU0FBUyxHQUFHLEtBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQzs0QkFFckMsT0FBTyxDQUFDLEdBQUcsQ0FBQyx5QkFBdUIsU0FBVyxDQUFDLENBQUM7d0JBQ3BELENBQUMsQ0FBQyxDQUFDO29CQUVQLENBQUMsQ0FBQyxDQUFBO2dCQUNWLENBQUM7WUFDTCxDQUFDLENBQUMsQ0FBQztRQUVQLENBQUMsQ0FBQyxDQUFDO0lBRVgsQ0FBQztJQUVMLGtCQUFDO0FBQUQsQ0FBQyxBQWpFRCxJQWlFQztBQWpFWSxrQ0FBVyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHsgZ2V0U2VydmVyQ29uZmlncyB9IGZyb20gJy4vZW52aXJvbm1lbnRzJztcbmltcG9ydCAqIGFzIFNlbmVjYSBmcm9tIFwic2VuZWNhXCI7XG5pbXBvcnQgKiBhcyBIYXBpIGZyb20gJ2hhcGknO1xuaW1wb3J0IHsgSGFwaVNlcnZlciB9IGZyb20gJy4vc2V2ZXItdHlwZXMnO1xuaW1wb3J0IHsgTW9kbHVlcyB9IGZyb20gJy4vbW9kdWxlcy9pbmRleCc7XG5jb25zdCBIT1NUID0gcHJvY2Vzcy5lbnYuSE9TVDtcbmNvbnN0IEJBU0VTID0gcHJvY2Vzcy5lbnYuQkFTRVM7XG4vLyBjb25zdCBCUk9BRENBU1QgPSBwcm9jZXNzLmVudi5CUk9BRENBU1RcbmNvbnN0IFJFR0lTVFJZID0gcHJvY2Vzcy5lbnYuUkVHSVNUUllcblxuZXhwb3J0IGNsYXNzIFN0YXJ0U2VydmVyIHtcbiAgICBwdWJsaWMgc2VydmVyOiBIYXBpU2VydmVyID0gbmV3IEhhcGkuU2VydmVyKCkgYXMgSGFwaVNlcnZlcjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBjb25zdCBwb3J0ID0gZ2V0U2VydmVyQ29uZmlncygpLnBvcnQ7XG5cbiAgICAgICAgdGhpcy5zZXJ2ZXIuY29ubmVjdGlvbih7XG4gICAgICAgICAgICBwb3J0OiBwb3J0LFxuICAgICAgICAgICAgcm91dGVzOiB7XG4gICAgICAgICAgICAgICAgY29yczogdHJ1ZVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY29ubmVjdFNlcnZlcihlbnY6IGJvb2xlYW4pOiB2b2lkIHtcblxuICAgICAgICByZXR1cm4gdGhpcy5zZXJ2ZXIucmVnaXN0ZXIoTW9kbHVlcywge1xuICAgICAgICAgICAgcm91dGVzOiB7XG4gICAgICAgICAgICAgICAgcHJlZml4OiAnL3YxJ1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAgICAgKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZXJyXG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5zZXJ2ZXIuaW5pdGlhbGl6ZSgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIERvbid0IGNvbnRpbnVlIHRvIHN0YXJ0IHNlcnZlciBpZiBtb2R1bGVcbiAgICAgICAgICAgICAgICAgICAgLy8gaXMgYmVpbmcgcmVxdWlyZSgpJ2QgKGxpa2VseSBpbiBhIHRlc3QpXG4gICAgICAgICAgICAgICAgICAgIGlmICghZW52KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBTdGFydGluZyB0aGUgc2VydmVyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNlcnZlci5zZW5lY2FcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudXNlKCdtcWxpZ2h0LXRyYW5zcG9ydCcsIHt9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC51c2UoJ21lc2gnLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF1dG86IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvc3Q6IEhPU1QsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VzOiBbYCR7QkFTRVN9OjM5OTk5YF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGxpc3RlbjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIHBpbnM6IFsncm9sZTpwaW5nLGNtZDpkYXRlJ10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgaG9zdDogSE9TVFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2xpZW50KHt0eXBlOiAnbXFsaWdodCd9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZWFkeSgoKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXJ2ZXIuc3RhcnQoKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHNlcnZlclVyaSA9IHRoaXMuc2VydmVyLmluZm8udXJpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgU2VydmVyIHJ1bm5pbmcgYXQ6LCAke3NlcnZlclVyaX1gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIH0pO1xuXG4gICAgfVxuXG59Il19